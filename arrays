// NUMBER SERIES
/* Given a number N, find the Nth term in the series 1, 3, 6, 10, 15, 21…

 

Example 1:

Input :
N = 4 
Output:
10
Explanation:
The 4th term of the Series is 10.  /*
class Solution {
    static int findNthTerm(int N) {
        int sum=0;
        for(int i=1;i<=N;i++){
            sum=sum+i;
        }
        return sum;
    }
};


/*
Given the value of n, we need to find the sum of the series where i-th term is sum of first i natural numbers.

NOTE: Sum of the series 1 + (1+2) + (1+2+3) + (1+2+3+4) + …… + (1+2+3+4+…+n)

Example 1:

Input: n = 5
Output: 35 
Explanation: 1 + (1+2) + (1+2+3).. = 35
Hence sum of the series is 35. /*
class Solution {
    static long sumOfTheSeries(long n){
        int sum=0,seriesterm=0;
        for(int i=1;i<=n;i++){
            sum=sum+i;
            seriesterm=seriesterm+(sum);
        }
        return seriesterm;
    }
}
/*Given the value of n, we need to find the sum of the series where i-th term is sum of first i odd natural numbers.

NOTE: Sum of the series 1 + (1+3) + (1+3+5) + (1+3+5+7) + …… + (1+3+5+7+…+(2n-1))

Example 1:

Input: n = 2
Output: 5 
Explanation: 1 + (1+3) = 5
Hence sum of the series is 5. /*
class Solution {
    static long sumOfTheSeries(long n){
        long x=0,sum=0;
        for(long i=1;i<=(2*n-1);i=i+2){
            x=x+i;
            sum=sum+x;
        }
        return sum;
    }
}
/*Given an integer n, your task is to compute the sum of all natural numbers from 1 to n (inclusive). If n is 0, the sum should be 0.

Examples:

Input: n = 1
Output: 1
Explanation: For n = 1, the sum will be 1.
Input: n = 5
Output: 15
Explanation: For n = 5, sum will be 15. 1 + 2 + 3 + 4 + 5 = 15. /*
class Solution {
    public static int seriesSum(long n) {
        int sum=0;
        for(int i=1;i<=n;i++){
            sum=sum+i;
        
        }
        return sum;
    }
}

/*Given an integer n, calculate the sum of series 13 + 23 + 33 + 43 + … till n-th term.

Examples:

Input: n = 5
Output: 225
Explanation: 13 + 23 + 33 + 43 + 53 = 225
Input: n = 7
Output: 784
Explanation: 13 + 23 + 33 + 43 + 53 + 63 + 73 = 784 /*
class Solution {
    int sumOfSeries(int n) {
        int sum=0;
        for(int i=1;i<=n;i++){
            sum=sum+(i*i*i);
        
        }
        return sum;
    }
}
/*    Given a number N.Find the sum of fifth powers of natural numbers till N i.e. 15+25+35+..+N5.

Example 1:

Input:
N=2
Output:
33
Explanation:
The sum is calculated as 15+25=1+32=33.
Example 2:

Input:
N=3
Output:
276
Explanation:
The sum is calculated as 15+25+35
=1+32+243=276. /*
class Solution {
    long sumOfFifthPowers(long N) {
       int sum=0;
        for(int i=1;i<=N;i++){
            sum=sum+(i*i*i*i*i);
        
        }
        return sum;
    }
}

/*You are given an integer n. Your task is to reverse the digits, ensuring that the reversed number has no leading zeroes.

Examples:

Input: 200
Output: 2
Explanation: By reversing the digits of number, number will change into 2.
Input : 122
Output: 221
Explanation: By reversing the digits of number, number will change into 221. /*
class Solution {
    public int reverseDigits(int n) {
        int  sum=0;
        while(n>0){
            sum=sum*10+(n%10);
            n=n/10;
    }
    return sum;
}
}

/*  Given an integer N, find the absolute difference between sum of the squares of first N natural numbers and square of sum of first N natural numbers.

Example 1:

Input: N = 2
Output: 4 
Explanation: abs|(12 + 22) - (1 + 2)2| = 4.  /*
class Solution{
    static long squaresDiff(int N){
        return Math.abs((N*(N+1)*(2*N+1))/6-(long)Math.pow((N*(N+1)/2),2));
    }
}
/*
Consider a sample space consisting of all perfect squares starting from 1, 4, 9 and so on. You are given a number n, you have to find the number of integers less than n in the sample space.

Examples :

Input: n = 9
Output: 2
Explanation: 1 and 4 are the only Perfect Squares less than 9. So, the Output is 2. /*
class Solution {
    static int countSquares(int n) {
        return (int)Math.sqrt(n-1);
    }
}
/* Write a Program to find the smallest element in the Array

Input: 

n = 5

1 3 5 7 8

Ouput Expected:

1 /*
class Main {
    public static void main(String[] args) {
        int n = 5;
        int [] a={1,3, 5, 7, 8};
        int small=a[0];
        for(int i=0;i<n;i++){
            if(small>a[i]){
                large=a[i];
            }
        }
        System.out.println(small);
    }
}
/*  Example 2

Input:

n = 8

5 7 34 67 2 56 5 8

Output:2  /*
class Main {
    public static void main(String[] args) {
        int n = 8;
        int [] a={5,7 ,34, 67, 2 ,56, 5, 8};
        int small=a[0];
        for(int i=0;i<n;i++){
            if(small>a[i]){
                large=a[i];
            }
        }
        System.out.println(small);
    }
}

/*
You are given an array arr[], the task is to return a list elements of arr in alternate order (starting from index 0).



Examples:

Input: arr[] = [1, 2, 3, 4]
Output: 1 3
Explanation:
Take first element: 1
Skip second element: 2
Take third element: 3
Skip fourth element: 4   /*

class Main {
    public static void main(String[] args) {
        int n=4;
        int [] a={1,2,3,4};
        for(int i=0;i<n;i=i+2){
          System.out.println(a[i]);   
        }
       
    }
}

/* Input: arr[] = [1, 2, 3, 4, 5]
Output: 1 3 5
Explanation:
Take first element: 1
Skip second element: 2
Take third element: 3
Skip fourth element: 4
Take fifth element: 5 /*
class Main {
    public static void main(String[] args) {
        int n=5;
        int [] a={1,2,3,4,5};
        for(int i=0;i<n;i=i+2){
          System.out.println(a[i]);   
        }
       
    }
}

/*Given an array arr of integers and an index key(0-based index). Your task is to return the element present at the index key in the array.

Input: key = 2 , arr = [10, 20, 30, 40, 50]
Output: 30
Explanation: The value of arr[2] is 30 . /*
class Main {
    public static void main(String[] args) {
        int n = 4, h=2;
        int[] a = {10, 20, 30, 40, 50};
        
        for (int i = 0; i < n; i++) { // Fixed increment section
            if (i== h) {
                System.out.println("The value of arr[2] is"+a[i]);   
            }
        }
    }
}
/* Input: key = 4 , arr = [10, 20, 30, 40, 50, 60, 70]
Output: 50
Explanation: The value of the arr[4] is 50 .

/*
class Main {
    public static void main(String[] args) {
        int n = 4, h=4;
        int[] a = {10, 20, 30, 40, 50, 60, 70};
        
        for (int i = 0; i < n; i++) { // Fixed increment section
            if (i== h) {
                System.out.println("The value of arr[4] is"+a[i]);   
            }
        }
    }
}

/* Given two arrays of arr1 and arr2, the task is to calculate the product of the maximum element of the first array arr1, and minimum element of the second array arr2.

Examples :

Input : arr1 = [5, 7, 9, 3, 6, 2],  arr2 = [1, 2, 6, 1, 9]
Output : 9
Explanation: The max in arr1 is 9. The min element in arr2 is 1. The product is 9*1 = 9. /*

class Main {
    public static void main(String[] args) {
        int n=5,m=5;
        int [] a={5, 7, 9, 3, 6, 2};
        int [] b={1, 2, 6, 1, 9};
        int max1=a[0];
        int min1=b[0];
        for(int i=0;i<n;i++){
            if(a[i]>max1){
                max1=a[i];
            }
        }
            
            for(int j=4;j<m;j++){
                  if(b[j]<min1){
                min1=b[j];
                
            }
            }
            int prod=max1*min1;
            System.out.println(prod);
      
    }
}
/* Input : arr1 = [0, 0, 0, 0],  arr2 = [1, 1, 2]
Output : 0 /*
class Main {
    public static void main(String[] args) {
        int n=5,m=5;
        int [] a={0, 0, 0, 0};
        int [] b={1, 1, 2};
        int max1=a[0];
        int min1=b[0];
        for(int i=0;i<n;i++){
            if(a[i]>max1){
                max1=a[i];
            }
        }
            
            for(int j=4;j<m;j++){
                  if(b[j]<min1){
                min1=b[j];
                
            }
            }
            int prod=max1*min1;
            System.out.println(prod);
      
    }
}
