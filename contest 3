/*  Rex is 5yrs old, he loves numbers. His teacher has provided him a new challenge, he needs your help in finding the solution. Given a number, you should find the sum of its digits.

Input Format

n = 5436

Constraints

1<=n<=100000

Output Format

18

Sample Input 0

5346
Sample Output 0

18
Sample Input 1

534693
Sample Output 1

30   /*
  import java.io.*;
import java.util.*;
import java.util.Scanner;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();

        int sum = 0;
        while (n > 0) {
            sum += n % 10; 
            n /= 10;      

    }
        System.out.println(sum);
}
}


/*
Alex is found of numbers, he found a new pattern of numbers called prime numbers. A prime number is a number which is divisible by one or the number itself. Now he wants your help in finding the number of prime numbers until a given number. 1 is neither prime nor composite so shouldn't be considered as prime.

Input Format

n = 7

Constraints

1<=n<=1000

Output Format

4

Sample Input 0

7
Sample Output 0

4
Sample Input 1

5
Sample Output 1

3  /*

  import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int primeCount = 0;
        for (int x = 2; x <= n; x++) {
            int isPrime = 1; 
            for (int i = 2; i < x; i++) {
                if (x % i == 0) {
                    isPrime = 0; 
                    break;
                }
            }

            if (isPrime == 1) {
                primeCount++;
            }
        }

        System.out.println(primeCount);

        scan.close();
    }
}
/*

import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int primeCount = 0;
        for (int x = 2; x <= n; x++) {
            int isPrime = 1; 
            for (int i = 2; i < x; i++) {
                if (x % i == 0) {
                    isPrime = 0; 
                    break;
                }
            }

            if (isPrime == 1) {
                primeCount++;
            }
        }

        System.out.println(primeCount);

        scan.close();
    }
}
//another way

import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int a = 0;
        for (int x = 2; x <= n; x++) {
            int fact = 1; 
            for (int i = 2; i < x; i++) {
                if (x % i == 0) {
                    fact = 0; 
                    break;
                }
            }

            if (fact== 1) {
                a++;
            }
        }

        System.out.println(a);

        scan.close();
    }
}
/*

You are given two integers n1 and n2. You need find the Lowest Common Multiple (LCM) of the two given numbers. Return the LCM of the two numbers.

The Lowest Common Multiple (LCM) of two integers is the lowest positive integer that is divisible by both the integers.

Example 1 Input: n1 = 4, n2 = 6

Output: 12

Explanation: 4 * 3 = 12, 6 * 2 = 12.

12 is the lowest integer that is divisible both 4 and 6.

Example 2 Input: n1 = 2, n2 = 3

Output: 6

Explanation: 2 * 3 = 6, 3 * 2 = 6.

6 is the lowest integer that is divisible both 2 and 3.

Input Format

4 6

Constraints

1<=n1<=100 1<=n2<=100

Output Format

12

Sample Input 0

2 3
Sample Output 0

6
Sample Input 1

4 3
Sample Output 1

12  /*

  import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n1 = scan.nextInt();
        int n2 = scan.nextInt();
        int gcd = findGCD(n1, n2);
        int lcm = (n1 * n2);
        System.out.println(lcm);

        scan.close();
    }

    public static int findGCD(int n1, int n2) {
        while (n2 != 0) {
            int temp = n2;
            n2 = n1 % n2;
            n1 = temp;
        }
        return n1;
    }
}
